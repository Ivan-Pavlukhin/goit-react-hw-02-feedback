{"version":3,"sources":["components/Card/button.module.css","components/Card/card.module.css","components/Statistic/Statistic.js","components/Card/Button.js","components/Section/Section.js","components/Card/Notification.js","components/Card/Card.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistic","string","map","item","index","toUpperCase","toLowerCase","join","Object","entries","this","props","stringModification","Component","propsTypes","PropTypes","objectOf","shape","good","number","isRequired","neutral","bad","Button","options","onLeaveFeedback","keys","option","className","styles","btn","onClick","Section","title","children","Notification","message","Card","state","incrementFeedbackHandler","value","setState","Math","round","wrapper","totalSumFeedbacks","total","positivePercentage","countPositiveFeedbackPercentage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90997e2d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button_btn__LxJI_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"card_wrapper__1lBUS\"};","import { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class Statistic extends Component {\r\n  stringModification(string) {\r\n    return [...string]\r\n      .map((item, index) => {\r\n        if (index === 0) {\r\n          return item.toUpperCase();\r\n        }\r\n        return item === item.toUpperCase() ? \" \" + item.toLowerCase() : item;\r\n      })\r\n      .join(\"\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {Object.entries(this.props).map((item) => (\r\n          <p key={item[0]}>\r\n            {this.stringModification(item[0])} : {item[1]}\r\n          </p>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nStatistic.propsTypes = {\r\n  props: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      good: PropTypes.number.isRequired,\r\n      neutral: PropTypes.number.isRequired,\r\n      bad: PropTypes.number.isRequired,\r\n    })\r\n  ),\r\n};\r\n","import PropTypes from \"prop-types\";\r\nimport styles from \"./button.module.css\";\r\n\r\nexport const Button = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      {Object.keys(options).map((option) => (\r\n        <button\r\n          className={styles.btn}\r\n          key={option}\r\n          onClick={() => {\r\n            onLeaveFeedback(option);\r\n          }}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nButton.propsTypes = {\r\n  options: PropTypes.objectOf(\r\n    PropTypes.shape({\r\n      good: PropTypes.number.isRequired,\r\n      neutral: PropTypes.number.isRequired,\r\n      bad: PropTypes.number.isRequired,\r\n    })\r\n  ),\r\n};\r\n","export const Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nexport { Notification };\r\n\r\nNotification.propsTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import { Component } from \"react\";\r\nimport { Statistic } from \"../Statistic\";\r\nimport { Button } from \"./Button\";\r\nimport { Section } from \"../Section\";\r\nimport { Notification } from \"./Notification\";\r\n\r\nimport styles from \"./card.module.css\";\r\n\r\nexport class Card extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  incrementFeedbackHandler = () => (value) => {\r\n    this.setState({\r\n      [value]: this.state[value] + 1,\r\n    });\r\n  };\r\n\r\n  totalSumFeedbacks({ good, neutral, bad }) {\r\n    return good + neutral + bad;\r\n  }\r\n\r\n  countPositiveFeedbackPercentage({ good, neutral, bad }) {\r\n    if (good === 0) {\r\n      return \"0%\";\r\n    }\r\n    return Math.round((good / (good + neutral + bad)) * 100) + \"%\";\r\n  }\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    return (\r\n      <div className={styles.wrapper}>\r\n        <Section title=\"Please leave feedback\">\r\n          <Button\r\n            options={this.state}\r\n            onLeaveFeedback={this.incrementFeedbackHandler()}\r\n          ></Button>\r\n        </Section>\r\n        {this.totalSumFeedbacks(this.state) !== 0 ? (\r\n          <Section title=\"Statistics\">\r\n            <Statistic\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={this.totalSumFeedbacks(this.state)}\r\n              positivePercentage={this.countPositiveFeedbackPercentage(\r\n                this.state\r\n              )}\r\n            ></Statistic>\r\n          </Section>\r\n        ) : (\r\n          <Notification message=\"No feedback given\" />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { Component } from \"react\";\nimport { Card } from \"./components/Card\";\n\nexport class App extends Component {\n  render() {\n    return <Card />;\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}